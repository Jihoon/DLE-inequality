# x0s = x0
x0s = x0/k_sol
}
x1 = x0/sc1
x2 = x0/sc2
x3 = x0/sc3
x4 = x0/sc4
x5 = x0/sc0
# Create base DF with two base vectors
# Harmonize to the same X domain
if (distr == "pareto") {
# xval0s = xval0
df = data.frame(xval0, x0 = approx(xval0s, x0s, xval0)$y)
} else if (distr == "lognormal") {
df = data.frame(xval0, x0)
}
df$x1 = approx(xval1, x1, xval0)$y
df$x2 = approx(xval2, x2, xval0)$y
df$x3 = approx(xval3, x3, xval0)$y
df$x4 = approx(xval4, x4, xval0)$y
df$x5 = approx(xval5, x5, xval0)$y
# Introduce the shift (X-axis) - only for log-normal
if (distr == "lognormal") {
df$x0 = c(rep(NA, actual.min/del), df$x0[1:(length(xval0)-actual.min/del+1)]) # A baseline distribution (lognormal x0 now with a shift)
df$x1 = c(rep(NA, dle.thres/del), df$x1[1:(length(xval0)-dle.thres/del)])
df$x2 = c(rep(NA, dle.thres/del), df$x2[1:(length(xval0)-dle.thres/del)])
df$x3 = c(rep(NA, dle.thres/del), df$x3[1:(length(xval0)-dle.thres/del)])
df$x4 = c(rep(NA, dle.thres/del), df$x4[1:(length(xval0)-dle.thres/del)])
df$x5 = c(rep(NA, dle.thres/del), df$x5[1:(length(xval0)-dle.thres/del)])
} else if (distr == "pareto") {
# For pareto, even x0 needs an affine transformation.
shift1 = as.integer((dle.thres - sc1*actual.min)/del)
shift2 = as.integer((dle.thres - sc2*actual.min)/del)
shift3 = as.integer((dle.thres - sc3*actual.min)/del)
shift4 = as.integer((dle.thres - sc4*actual.min)/del)
shift5 = as.integer((dle.thres - sc0*actual.min)/del)
df$x1 = c(rep(NA, shift1), df$x1[1:(length(xval0)-shift1)])
df$x2 = c(rep(NA, shift2), df$x2[1:(length(xval0)-shift2)])
df$x3 = c(rep(NA, shift3), df$x3[1:(length(xval0)-shift3)])
df$x4 = c(rep(NA, shift4), df$x4[1:(length(xval0)-shift4)])
df$x5 = c(rep(NA, shift5), df$x5[1:(length(xval0)-shift5)])
}
gtext = data.frame(xv = apply(df[-1], 2, function(x){xval0[which(x==max(x, na.rm=T))]}),
yv = apply(df[-1], 2, function(x) max(x, na.rm=T)+0.001),
c = paste0('x', 0:5),
lab = c(paste0("G[x]:", given_gini),
paste0("list(G[z]:0.45, r:5.8*'%'/yr)"),
paste0("list(G[z]:0.48, r:6.8*'%'/yr)"),
paste0("list(G[z]:0.50, r:7.8*'%'/yr)"),
paste0("list(G[z]:0.54, r:9.8*'%'/yr)"),
paste0("list(G[z]:0.33, r:2.4*'%'/yr)")))
pdf(file = paste0("India GINI illustration-", distr, ".pdf"), width = 10, height = 6)
# Plot for Princeton w/s, May 2019
ggplot(df %>% select(-x2) %>% gather(key=dist, value=f, -xval0), aes(x=xval0, y=f, color=dist)) +
geom_line(size=1) +
geom_vline(xintercept = actual.min, linetype="dashed", colour="blue") +
geom_vline(xintercept = dle.thres, linetype="dashed", colour="brown") +
geom_text(aes(x=actual.min, label=paste0("Actual minimum : ", actual.min, "\n"), y=0.02), colour="blue", hjust=0.0, angle=90, size=4.5) +
geom_text(aes(x=dle.thres, label=paste0("Desired minimum : ", dle.thres, "\n"), y=0.02), colour="brown", hjust=0.0, angle=90, size=4.5) +
labs(x="Final energy consumption (GJ/cap)", y="Density")+
# geom_text(aes(x=xval0[which(x0==max(x0, na.rm=T))], label=paste0("g_x: ", given_gini),   y=max(x0, na.rm=T)+0.001, colour="x0"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x1==max(x1, na.rm=T))], label=paste0("g_z: 0.45, r: 5.8%"),  y=max(x1, na.rm=T)+0.001, colour="x1"), size=4, hjust=0.0, vjust=0.0, data=df) +
# # geom_text(aes(x=xval0[which(x2==max(x2, na.rm=T))], label=paste0("g: 0.48, r: 6.8%"),  y=max(x2, na.rm=T)+0.001, colour="x2"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x3==max(x3, na.rm=T))], label=paste0("g_z: 0.50, r: 7.8%"),  y=max(x3, na.rm=T)+0.001, colour="x3"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x4==max(x4, na.rm=T))], label=paste0("g_z: 0.54, r: 9.8%"), y=max(x4, na.rm=T)+0.001, colour="x4"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x5==max(x5, na.rm=T))], label=paste0("g_z: 0.33, r: 2.4%")), y=max(x5, na.rm=T)+0.001, colour="x5"), size=4, hjust=0.0, vjust=0.0, data=df) +
geom_text(data=gtext[-3,], aes(x=xv, label=lab, y=yv, colour=c), size=4, hjust=0.0, vjust=0.0, parse=TRUE) +
theme(legend.position = "none") +
xlim(c(0, 30))
dev.off()
pdf(file = paste0("India GINI illustration-", distr, ".pdf"), width = 10, height = 6)
# Plot for Princeton w/s, May 2019
ggplot(df %>% select(-x2) %>% gather(key=dist, value=f, -xval0), aes(x=xval0, y=f, color=dist)) +
geom_line(size=1) +
geom_vline(xintercept = actual.min, linetype="dashed", colour="blue") +
geom_vline(xintercept = dle.thres, linetype="dashed", colour="brown") +
geom_text(aes(x=actual.min, label=paste0("Actual minimum : ", actual.min, "\n"), y=0.02), colour="blue", hjust=0.0, angle=90, size=4.5) +
geom_text(aes(x=dle.thres, label=paste0("Desired minimum : ", dle.thres, "\n"), y=0.02), colour="brown", hjust=0.0, angle=90, size=4.5) +
labs(x="Final energy consumption (GJ/cap)", y="Density")+
# geom_text(aes(x=xval0[which(x0==max(x0, na.rm=T))], label=paste0("g_x: ", given_gini),   y=max(x0, na.rm=T)+0.001, colour="x0"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x1==max(x1, na.rm=T))], label=paste0("g_z: 0.45, r: 5.8%"),  y=max(x1, na.rm=T)+0.001, colour="x1"), size=4, hjust=0.0, vjust=0.0, data=df) +
# # geom_text(aes(x=xval0[which(x2==max(x2, na.rm=T))], label=paste0("g: 0.48, r: 6.8%"),  y=max(x2, na.rm=T)+0.001, colour="x2"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x3==max(x3, na.rm=T))], label=paste0("g_z: 0.50, r: 7.8%"),  y=max(x3, na.rm=T)+0.001, colour="x3"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x4==max(x4, na.rm=T))], label=paste0("g_z: 0.54, r: 9.8%"), y=max(x4, na.rm=T)+0.001, colour="x4"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x5==max(x5, na.rm=T))], label=paste0("g_z: 0.33, r: 2.4%")), y=max(x5, na.rm=T)+0.001, colour="x5"), size=4, hjust=0.0, vjust=0.0, data=df) +
geom_text(data=gtext[-3,], aes(x=xv, label=lab, y=yv, colour=c), size=4, hjust=0.0, vjust=0.0, parse=TRUE) +
theme(legend.position = "none") +
xlim(c(0, 30))
dev.off()
distr = "lognormal" # "pareto" #
sc0 = 0.7
sc1 = 1.307
sc2 = 1.511
sc3 = 1.757
sc4 = 2.279
# Interval for the x values
del = 0.01
xval0 = seq(0, 120, del)
# xval0_org = xval0
if (distr == "lognormal") {
gini_baselognormal = given_gini *avg_ene / (avg_ene-actual.min) # Assume scaler=1 for this base transformation
sdlog_hat = qnorm((gini_baselognormal+1)/2)*sqrt(2)
mlog_hat = log(avg_ene-actual.min) - (sdlog_hat^2)/2
# sdlog_hat = qnorm((given_gini+1)/2)*sqrt(2)
# mlog_hat = log(avg_ene) - (sdlog_hat^2)/2
# Construct a base lognormal distribution for log x0 ~ N(mlog_hat, sdlog_hat)
x0 = dlnorm(xval0, mlog_hat, sdlog_hat)
} else if (distr == "pareto") {
# Pareto
# dd = 10
# x0 = dpareto(xval0, actual.min, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)= 0.54 Staus quo
source("3.Pareto.R")
}
#
# x1 = dpareto(xval0, actual.min, shape=((1/given_gini)+1)/2/2)   # Gini = 1/(2*alpha-1)
# x2 = dpareto(xval0, actual.min*2, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)
# xd = dpareto(xval0, actual.min+dd, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)
# gini(2*r0)
# plot(xval0, x0, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, x1, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, x2, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, x0*2^(((1/given_gini)+1)/2), xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0*2, x0/2, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0+dd, x0, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, xd, xlim=c(0,50), ylim=c(0, 0.5))
# # Test gini for pareto
# r0 = rpareto(1e7, actual.min, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)
# r1 = r0*sc1 + dle.thres - sc1*actual.min
# r2 = r0*sc2 + dle.thres - sc2*actual.min
# r3 = r0*sc3 + dle.thres - sc3*actual.min
# r4 = r0*sc4 + dle.thres - sc4*actual.min
# r5 = r0*sc0 + dle.thres - sc0*actual.min
# print(paste(gini(r0), gini(r1), gini(r2), gini(r3), gini(r4), gini(r5)))
# Base scaled (x-axis)
if (distr == "pareto") {
# xval0s = xval0
xval0s = xval0*k_sol+d_sol
}
xval1 = xval0*sc1
xval2 = xval0*sc2
xval3 = xval0*sc3
xval4 = xval0*sc4
xval5 = xval0*sc0
# Base density scaled (Y-axis)
if (distr == "pareto") {
# x0s = x0
x0s = x0/k_sol
}
x1 = x0/sc1
x2 = x0/sc2
x3 = x0/sc3
x4 = x0/sc4
x5 = x0/sc0
# Create base DF with two base vectors
# Harmonize to the same X domain
if (distr == "pareto") {
# xval0s = xval0
df = data.frame(xval0, x0 = approx(xval0s, x0s, xval0)$y)
} else if (distr == "lognormal") {
df = data.frame(xval0, x0)
}
df$x1 = approx(xval1, x1, xval0)$y
df$x2 = approx(xval2, x2, xval0)$y
df$x3 = approx(xval3, x3, xval0)$y
df$x4 = approx(xval4, x4, xval0)$y
df$x5 = approx(xval5, x5, xval0)$y
# Introduce the shift (X-axis) - only for log-normal
if (distr == "lognormal") {
df$x0 = c(rep(NA, actual.min/del), df$x0[1:(length(xval0)-actual.min/del+1)]) # A baseline distribution (lognormal x0 now with a shift)
df$x1 = c(rep(NA, dle.thres/del), df$x1[1:(length(xval0)-dle.thres/del)])
df$x2 = c(rep(NA, dle.thres/del), df$x2[1:(length(xval0)-dle.thres/del)])
df$x3 = c(rep(NA, dle.thres/del), df$x3[1:(length(xval0)-dle.thres/del)])
df$x4 = c(rep(NA, dle.thres/del), df$x4[1:(length(xval0)-dle.thres/del)])
df$x5 = c(rep(NA, dle.thres/del), df$x5[1:(length(xval0)-dle.thres/del)])
} else if (distr == "pareto") {
# For pareto, even x0 needs an affine transformation.
shift1 = as.integer((dle.thres - sc1*actual.min)/del)
shift2 = as.integer((dle.thres - sc2*actual.min)/del)
shift3 = as.integer((dle.thres - sc3*actual.min)/del)
shift4 = as.integer((dle.thres - sc4*actual.min)/del)
shift5 = as.integer((dle.thres - sc0*actual.min)/del)
df$x1 = c(rep(NA, shift1), df$x1[1:(length(xval0)-shift1)])
df$x2 = c(rep(NA, shift2), df$x2[1:(length(xval0)-shift2)])
df$x3 = c(rep(NA, shift3), df$x3[1:(length(xval0)-shift3)])
df$x4 = c(rep(NA, shift4), df$x4[1:(length(xval0)-shift4)])
df$x5 = c(rep(NA, shift5), df$x5[1:(length(xval0)-shift5)])
}
gtext = data.frame(xv = apply(df[-1], 2, function(x){xval0[which(x==max(x, na.rm=T))]}),
yv = apply(df[-1], 2, function(x) max(x, na.rm=T)+0.001),
c = paste0('x', 0:5),
lab = c(paste0("G[x]:", given_gini),
paste0("list(G[z]:0.45, r:5.8*'%'/yr)"),
paste0("list(G[z]:0.48, r:6.8*'%'/yr)"),
paste0("list(G[z]:0.50, r:7.8*'%'/yr)"),
paste0("list(G[z]:0.54, r:9.8*'%'/yr)"),
paste0("list(G[z]:0.33, r:2.4*'%'/yr)")))
pdf(file = paste0("India GINI illustration-", distr, ".pdf"), width = 10, height = 6)
# Plot for Princeton w/s, May 2019
ggplot(df %>% select(-x2) %>% gather(key=dist, value=f, -xval0), aes(x=xval0, y=f, color=dist)) +
geom_line(size=1) +
geom_vline(xintercept = actual.min, linetype="dashed", colour="blue") +
geom_vline(xintercept = dle.thres, linetype="dashed", colour="brown") +
geom_text(aes(x=actual.min, label=paste0("Actual minimum : ", actual.min, "\n"), y=0.02), colour="blue", hjust=0.0, angle=90, size=4.5) +
geom_text(aes(x=dle.thres, label=paste0("Desired minimum : ", dle.thres, "\n"), y=0.02), colour="brown", hjust=0.0, angle=90, size=4.5) +
labs(x="Final energy consumption (GJ/cap)", y="Density")+
# geom_text(aes(x=xval0[which(x0==max(x0, na.rm=T))], label=paste0("g_x: ", given_gini),   y=max(x0, na.rm=T)+0.001, colour="x0"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x1==max(x1, na.rm=T))], label=paste0("g_z: 0.45, r: 5.8%"),  y=max(x1, na.rm=T)+0.001, colour="x1"), size=4, hjust=0.0, vjust=0.0, data=df) +
# # geom_text(aes(x=xval0[which(x2==max(x2, na.rm=T))], label=paste0("g: 0.48, r: 6.8%"),  y=max(x2, na.rm=T)+0.001, colour="x2"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x3==max(x3, na.rm=T))], label=paste0("g_z: 0.50, r: 7.8%"),  y=max(x3, na.rm=T)+0.001, colour="x3"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x4==max(x4, na.rm=T))], label=paste0("g_z: 0.54, r: 9.8%"), y=max(x4, na.rm=T)+0.001, colour="x4"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x5==max(x5, na.rm=T))], label=paste0("g_z: 0.33, r: 2.4%")), y=max(x5, na.rm=T)+0.001, colour="x5"), size=4, hjust=0.0, vjust=0.0, data=df) +
geom_text(data=gtext[-3,], aes(x=xv, label=lab, y=yv, colour=c), size=4, hjust=0.0, vjust=0.0, parse=TRUE) +
theme(legend.position = "none") +
xlim(c(0, 30))
dev.off()
dle.thres
del
del
dle.thres/del
length(xval0)
actual.min/del
dle.thres/del
df$x0 = c(rep(NA, actual.min/del), df$x0[1:(length(xval0)-actual.min/del)]) # A baseline distribution (lognormal x0 now with a shift)
if (distr == "lognormal") {
df$x0 = c(rep(NA, actual.min/del), df$x0[1:(length(xval0)-actual.min/del)]) # A baseline distribution (lognormal x0 now with a shift)
df$x1 = c(rep(NA, dle.thres/del),  df$x1[1:(length(xval0)-dle.thres/del)])
df$x2 = c(rep(NA, dle.thres/del),  df$x2[1:(length(xval0)-dle.thres/del)])
df$x3 = c(rep(NA, dle.thres/del),  df$x3[1:(length(xval0)-dle.thres/del)])
df$x4 = c(rep(NA, dle.thres/del),  df$x4[1:(length(xval0)-dle.thres/del)])
df$x5 = c(rep(NA, dle.thres/del),  df$x5[1:(length(xval0)-dle.thres/del)])
} else if (distr == "pareto") {
# For pareto, even x0 needs an affine transformation.
shift1 = as.integer((dle.thres - sc1*actual.min)/del)
shift2 = as.integer((dle.thres - sc2*actual.min)/del)
shift3 = as.integer((dle.thres - sc3*actual.min)/del)
shift4 = as.integer((dle.thres - sc4*actual.min)/del)
shift5 = as.integer((dle.thres - sc0*actual.min)/del)
df$x1 = c(rep(NA, shift1), df$x1[1:(length(xval0)-shift1)])
df$x2 = c(rep(NA, shift2), df$x2[1:(length(xval0)-shift2)])
df$x3 = c(rep(NA, shift3), df$x3[1:(length(xval0)-shift3)])
df$x4 = c(rep(NA, shift4), df$x4[1:(length(xval0)-shift4)])
df$x5 = c(rep(NA, shift5), df$x5[1:(length(xval0)-shift5)])
}
gtext = data.frame(xv = apply(df[-1], 2, function(x){xval0[which(x==max(x, na.rm=T))]}),
yv = apply(df[-1], 2, function(x) max(x, na.rm=T)+0.001),
c = paste0('x', 0:5),
lab = c(paste0("G[x]:", given_gini),
paste0("list(G[z]:0.45, r:5.8*'%'/yr)"),
paste0("list(G[z]:0.48, r:6.8*'%'/yr)"),
paste0("list(G[z]:0.50, r:7.8*'%'/yr)"),
paste0("list(G[z]:0.54, r:9.8*'%'/yr)"),
paste0("list(G[z]:0.33, r:2.4*'%'/yr)")))
pdf(file = paste0("India GINI illustration-", distr, ".pdf"), width = 10, height = 6)
# Plot for Princeton w/s, May 2019
ggplot(df %>% select(-x2) %>% gather(key=dist, value=f, -xval0), aes(x=xval0, y=f, color=dist)) +
geom_line(size=1) +
geom_vline(xintercept = actual.min, linetype="dashed", colour="blue") +
geom_vline(xintercept = dle.thres, linetype="dashed", colour="brown") +
geom_text(aes(x=actual.min, label=paste0("Actual minimum : ", actual.min, "\n"), y=0.02), colour="blue", hjust=0.0, angle=90, size=4.5) +
geom_text(aes(x=dle.thres, label=paste0("Desired minimum : ", dle.thres, "\n"), y=0.02), colour="brown", hjust=0.0, angle=90, size=4.5) +
labs(x="Final energy consumption (GJ/cap)", y="Density")+
# geom_text(aes(x=xval0[which(x0==max(x0, na.rm=T))], label=paste0("g_x: ", given_gini),   y=max(x0, na.rm=T)+0.001, colour="x0"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x1==max(x1, na.rm=T))], label=paste0("g_z: 0.45, r: 5.8%"),  y=max(x1, na.rm=T)+0.001, colour="x1"), size=4, hjust=0.0, vjust=0.0, data=df) +
# # geom_text(aes(x=xval0[which(x2==max(x2, na.rm=T))], label=paste0("g: 0.48, r: 6.8%"),  y=max(x2, na.rm=T)+0.001, colour="x2"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x3==max(x3, na.rm=T))], label=paste0("g_z: 0.50, r: 7.8%"),  y=max(x3, na.rm=T)+0.001, colour="x3"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x4==max(x4, na.rm=T))], label=paste0("g_z: 0.54, r: 9.8%"), y=max(x4, na.rm=T)+0.001, colour="x4"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x5==max(x5, na.rm=T))], label=paste0("g_z: 0.33, r: 2.4%")), y=max(x5, na.rm=T)+0.001, colour="x5"), size=4, hjust=0.0, vjust=0.0, data=df) +
geom_text(data=gtext[-3,], aes(x=xv, label=lab, y=yv, colour=c), size=4, hjust=0.0, vjust=0.0, parse=TRUE) +
theme(legend.position = "none") +
xlim(c(0, 30))
dev.off()
# Paramebers are taken from 'Sample calculation - gini shift.xlsx' at \IIASA\DLE - Documents\WS3 - Documents\DLE and inequality
given_gini = 0.55 # Current Gini (energy)
avg_ene = 18.1    # Current avg GJ/cap
dle.thres = 11.3  # DLE GJ/cap
actual.min = 4.63  # Current minimum GJ/cap
distr = "lognormal" # "pareto" #
sc0 = 0.7
sc1 = 1.307
sc2 = 1.511
sc3 = 1.757
sc4 = 2.279
# Interval for the x values
del = 0.01
xval0 = seq(0, 120, del)
# xval0_org = xval0
if (distr == "lognormal") {
gini_baselognormal = given_gini *avg_ene / (avg_ene-actual.min) # Assume scaler=1 for this base transformation
sdlog_hat = qnorm((gini_baselognormal+1)/2)*sqrt(2)
mlog_hat = log(avg_ene-actual.min) - (sdlog_hat^2)/2
# sdlog_hat = qnorm((given_gini+1)/2)*sqrt(2)
# mlog_hat = log(avg_ene) - (sdlog_hat^2)/2
# Construct a base lognormal distribution for log x0 ~ N(mlog_hat, sdlog_hat)
x0 = dlnorm(xval0, mlog_hat, sdlog_hat)
} else if (distr == "pareto") {
# Pareto
# dd = 10
# x0 = dpareto(xval0, actual.min, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)= 0.54 Staus quo
source("3.Pareto.R")
}
#
# x1 = dpareto(xval0, actual.min, shape=((1/given_gini)+1)/2/2)   # Gini = 1/(2*alpha-1)
# x2 = dpareto(xval0, actual.min*2, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)
# xd = dpareto(xval0, actual.min+dd, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)
# gini(2*r0)
# plot(xval0, x0, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, x1, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, x2, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, x0*2^(((1/given_gini)+1)/2), xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0*2, x0/2, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0+dd, x0, xlim=c(0,50), ylim=c(0, 0.5))
# plot(xval0, xd, xlim=c(0,50), ylim=c(0, 0.5))
# # Test gini for pareto
# r0 = rpareto(1e7, actual.min, shape=((1/given_gini)+1)/2)   # Gini = 1/(2*alpha-1)
# r1 = r0*sc1 + dle.thres - sc1*actual.min
# r2 = r0*sc2 + dle.thres - sc2*actual.min
# r3 = r0*sc3 + dle.thres - sc3*actual.min
# r4 = r0*sc4 + dle.thres - sc4*actual.min
# r5 = r0*sc0 + dle.thres - sc0*actual.min
# print(paste(gini(r0), gini(r1), gini(r2), gini(r3), gini(r4), gini(r5)))
# Base scaled (x-axis)
if (distr == "pareto") {
# xval0s = xval0
xval0s = xval0*k_sol+d_sol
}
xval1 = xval0*sc1
xval2 = xval0*sc2
xval3 = xval0*sc3
xval4 = xval0*sc4
xval5 = xval0*sc0
# Base density scaled (Y-axis)
if (distr == "pareto") {
# x0s = x0
x0s = x0/k_sol
}
x1 = x0/sc1
x2 = x0/sc2
x3 = x0/sc3
x4 = x0/sc4
x5 = x0/sc0
# Create base DF with two base vectors
# Harmonize to the same X domain
if (distr == "pareto") {
# xval0s = xval0
df = data.frame(xval0, x0 = approx(xval0s, x0s, xval0)$y)
} else if (distr == "lognormal") {
df = data.frame(xval0, x0)
}
df$x1 = approx(xval1, x1, xval0)$y
df$x2 = approx(xval2, x2, xval0)$y
df$x3 = approx(xval3, x3, xval0)$y
df$x4 = approx(xval4, x4, xval0)$y
df$x5 = approx(xval5, x5, xval0)$y
# Introduce the shift (X-axis) - only for log-normal
if (distr == "lognormal") {
df$x0 = c(rep(NA, actual.min/del), df$x0[1:(length(xval0)-actual.min/del)]) # A baseline distribution (lognormal x0 now with a shift)
df$x1 = c(rep(NA, dle.thres/del),  df$x1[1:(length(xval0)-dle.thres/del)])
df$x2 = c(rep(NA, dle.thres/del),  df$x2[1:(length(xval0)-dle.thres/del)])
df$x3 = c(rep(NA, dle.thres/del),  df$x3[1:(length(xval0)-dle.thres/del)])
df$x4 = c(rep(NA, dle.thres/del),  df$x4[1:(length(xval0)-dle.thres/del)])
df$x5 = c(rep(NA, dle.thres/del),  df$x5[1:(length(xval0)-dle.thres/del)])
} else if (distr == "pareto") {
# For pareto, even x0 needs an affine transformation.
shift1 = as.integer((dle.thres - sc1*actual.min)/del)
shift2 = as.integer((dle.thres - sc2*actual.min)/del)
shift3 = as.integer((dle.thres - sc3*actual.min)/del)
shift4 = as.integer((dle.thres - sc4*actual.min)/del)
shift5 = as.integer((dle.thres - sc0*actual.min)/del)
df$x1 = c(rep(NA, shift1), df$x1[1:(length(xval0)-shift1)])
df$x2 = c(rep(NA, shift2), df$x2[1:(length(xval0)-shift2)])
df$x3 = c(rep(NA, shift3), df$x3[1:(length(xval0)-shift3)])
df$x4 = c(rep(NA, shift4), df$x4[1:(length(xval0)-shift4)])
df$x5 = c(rep(NA, shift5), df$x5[1:(length(xval0)-shift5)])
}
gtext = data.frame(xv = apply(df[-1], 2, function(x){xval0[which(x==max(x, na.rm=T))]}),
yv = apply(df[-1], 2, function(x) max(x, na.rm=T)+0.001),
c = paste0('x', 0:5),
lab = c(paste0("G[x]:", given_gini),
paste0("list(G[z]:0.45, r:5.8*'%'/yr)"),
paste0("list(G[z]:0.48, r:6.8*'%'/yr)"),
paste0("list(G[z]:0.50, r:7.8*'%'/yr)"),
paste0("list(G[z]:0.54, r:9.8*'%'/yr)"),
paste0("list(G[z]:0.33, r:2.4*'%'/yr)")))
pdf(file = paste0("India GINI illustration-", distr, ".pdf"), width = 10, height = 6)
# Plot for Princeton w/s, May 2019
ggplot(df %>% select(-x2) %>% gather(key=dist, value=f, -xval0), aes(x=xval0, y=f, color=dist)) +
geom_line(size=1) +
geom_vline(xintercept = actual.min, linetype="dashed", colour="blue") +
geom_vline(xintercept = dle.thres, linetype="dashed", colour="brown") +
geom_text(aes(x=actual.min, label=paste0("Actual minimum : ", actual.min, "\n"), y=0.02), colour="blue", hjust=0.0, angle=90, size=4.5) +
geom_text(aes(x=dle.thres, label=paste0("Desired minimum : ", dle.thres, "\n"), y=0.02), colour="brown", hjust=0.0, angle=90, size=4.5) +
labs(x="Final energy consumption (GJ/cap)", y="Density")+
# geom_text(aes(x=xval0[which(x0==max(x0, na.rm=T))], label=paste0("g_x: ", given_gini),   y=max(x0, na.rm=T)+0.001, colour="x0"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x1==max(x1, na.rm=T))], label=paste0("g_z: 0.45, r: 5.8%"),  y=max(x1, na.rm=T)+0.001, colour="x1"), size=4, hjust=0.0, vjust=0.0, data=df) +
# # geom_text(aes(x=xval0[which(x2==max(x2, na.rm=T))], label=paste0("g: 0.48, r: 6.8%"),  y=max(x2, na.rm=T)+0.001, colour="x2"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x3==max(x3, na.rm=T))], label=paste0("g_z: 0.50, r: 7.8%"),  y=max(x3, na.rm=T)+0.001, colour="x3"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x4==max(x4, na.rm=T))], label=paste0("g_z: 0.54, r: 9.8%"), y=max(x4, na.rm=T)+0.001, colour="x4"), size=4, hjust=0.0, vjust=0.0, data=df) +
# geom_text(aes(x=xval0[which(x5==max(x5, na.rm=T))], label=paste0("g_z: 0.33, r: 2.4%")), y=max(x5, na.rm=T)+0.001, colour="x5"), size=4, hjust=0.0, vjust=0.0, data=df) +
geom_text(data=gtext[-3,], aes(x=xv, label=lab, y=yv, colour=c), size=4, hjust=0.0, vjust=0.0, parse=TRUE) +
theme(legend.position = "none") +
xlim(c(0, 30))
dev.off()
p
cty.pov <- WDI(indicator = c("SI.POV.DDAY", "SI.POV.LMIC", "SI.POV.UMIC", "NY.GDP.PCAP.PP.CD", "SP.POP.TOTL"), start = 2010, end = 2017, extra = TRUE, cache = NULL) %>%
filter(capital!="") %>%         # Get only countries, no aggregate regions
filter(!is.na(SI.POV.DDAY))
library(WDI)
cty.pov <- WDI(indicator = c("SI.POV.DDAY", "SI.POV.LMIC", "SI.POV.UMIC", "NY.GDP.PCAP.PP.CD", "SP.POP.TOTL"), start = 2010, end = 2017, extra = TRUE, cache = NULL) %>%
filter(capital!="") %>%         # Get only countries, no aggregate regions
filter(!is.na(SI.POV.DDAY))
library(tidyverse)
cty.pov <- WDI(indicator = c("SI.POV.DDAY", "SI.POV.LMIC", "SI.POV.UMIC", "NY.GDP.PCAP.PP.CD", "SP.POP.TOTL"), start = 2010, end = 2017, extra = TRUE, cache = NULL) %>%
filter(capital!="") %>%         # Get only countries, no aggregate regions
filter(!is.na(SI.POV.DDAY)) %>% # only those with nonzero headcounts under poverty
cty.pov <- WDI(indicator = c("SI.POV.DDAY", "SI.POV.LMIC", "SI.POV.UMIC", "NY.GDP.PCAP.PP.CD", "SP.POP.TOTL"), start = 2010, end = 2017, extra = TRUE, cache = NULL) %>%
filter(capital!="") %>%         # Get only countries, no aggregate regions
filter(!is.na(SI.POV.DDAY))
str(cty.pov)
View(cty.pov)
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL)
View(cty.pov.cnt)
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2015)
head(master)
library(countrycode)
?countrycode
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2015) %>%
mutate(iso2c = countrycode(iso3c, 'iso3c', 'iso2c'))
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2015) %>%
mutate(iso3c = countrycode(iso2c, 'iso2c', 'iso3c'))
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2015)
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2015) %>%
left_join(master, by=c("iso3c", "year"))
View(master)
head(master)
master %>% count(year)
master %>% ungroup() %>%count(year)
temp =master %>% ungroup() %>%count(year)
View(temp)
View(temp)
head(raw.gini)
raw.gini %>% count(year)
temp=raw.gini %>% count(year)
View(temp)
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2014) %>%
left_join(master, by=c("iso3c", "year"))  # master has too few countries with GINI information..
View(temp)
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2014) %>%
left_join(master, by=c("iso3c", "year")) %>% # master has too few countries with GINI information, but a bit more for 2014 than for 2015. (41 vs 30)
arrange(pop1.9)
1.9*365
View(raw.gini)
cty.pov <- WDI(indicator = c("SI.POV.DDAY", "SI.POV.LMIC", "SI.POV.UMIC",
"NY.GDP.PCAP.PP.CD", "SP.POP.TOTL", "NY.GDP.PCAP.KD.ZG", "NY.GDP.MKTP.KD.ZG"),
start = 2010, end = 2017, extra = TRUE, cache = NULL) %>%
filter(capital!="") %>%         # Get only countries, no aggregate regions
filter(!is.na(SI.POV.DDAY))     # only those with nonzero headcounts under poverty
cty.pov.cnt <- cty.pov %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL) %>%
filter(year==2014) %>%
left_join(master, by=c("iso3c", "year")) %>% # master has too few countries with GINI information, but a bit more for 2014 than for 2015. (41 vs 30)
arrange(pop1.9)
cty.pov.selec <- cty.pov %>%
filter(iso3c %in% c("IND", "ZAF", "MOZ", "NER", "BWA"))
View(cty.pov.selec)
cty.pov.selec <- cty.pov %>%
filter(iso3c %in% c("IND", "ZAF", "MOZ", "NER", "BWA")) %>%
left_join(master, by=c("iso3c", "year"))
cty.pov.selec <- cty.pov %>%
filter(iso3c %in% c("IND", "ZAF", "MOZ", "NER", "BWA")) %>%
left_join(master, by=c("iso3c", "year")) %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL)
cty.pov.selec <- cty.pov %>%
filter(iso3c %in% c("IND", "ZAF", "MOZ", "NER", "BWA", "RWA")) %>%
left_join(master, by=c("iso3c", "year")) %>%
mutate(pop1.9 = SI.POV.DDAY*SP.POP.TOTL,
pop3.2 = SI.POV.LMIC*SP.POP.TOTL,
pop5.5 = SI.POV.UMIC*SP.POP.TOTL)
